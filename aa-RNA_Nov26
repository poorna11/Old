# -*- coding: utf-8 -*-
"""
Created on Wed Nov 26 12:44:30 2014 @author: Poorna
"""

"""Detect and plot RNA base- amino acid interactions."""
from fr3d.cif.reader import Cif
from definitions import RNAbasecoordinates
from definitions import RNAconnections
import numpy as np
import matplotlib.pyplot as plt

def get_structure(filename):
    with open(filename, 'rb') as raw:
        structure = Cif(raw).structure()
        """All RNA bases are placed in the standard orientation. All Hydrogen
 atoms are inferred. Rotation matrix is calculated for each base."""
        structure.infer_hydrogens()
        return structure
        
def find_neighbors(structure,base_seq,base_part,RNA_chain, aa, aa_part, dist_cutoff):
    """Finds all amino acids of type "aa" for which center of "aa_part" is within
    specified distance of bases of type "base" and returns superposed bases"""
    rotated_aa_x = []
    rotated_aa_y = []
    rotated_aa_z = []
    count = 0
    for residue in structure.residues(chain=RNA_chain, sequence=base_seq):
        base_center = residue.centers[base_part]
        for aa_residue in structure.residues(sequence = aa):                   
            for atom in aa_residue.atoms():
                aa_center = aa_residue.centers[aa_part]
                dist_vector = np.subtract(base_center, aa_center)
                dist_matrix = np.matrix(dist_vector)
                transposed_dist_vector = dist_matrix.transpose()
                dist_scalar = np.linalg.norm(dist_vector)
                if dist_scalar <= dist_cutoff:
                    rotated_aa_center = residue.rotation_matrix * transposed_dist_vector
                    rotated_aa_x.append(rotated_aa_center[0])
                    rotated_aa_y.append(rotated_aa_center[1])
                    rotated_aa_z.append(rotated_aa_center[2])
                    count = count +1
        print "No. of interactions:", count
        return (rotated_aa_x, rotated_aa_y, rotated_aa_z)

def draw_base(base_seq, connections):
    """Connects atoms to draw neighboring bases and amino acids for 3D plots"""
     #creates lists of rotated base coordinates
    new_base_x = []
    new_base_y = []
    new_base_z = [] 
    for atomname in connections[base_seq]:
        coord = RNAbasecoordinates[base_seq][atomname]
        new_base_x.append(coord[0])
        new_base_y.append(coord[1])
        new_base_z.append(coord[2])
    return (new_base_x, new_base_y, new_base_z)
   
"""Inputs base, amino acid, aa_part of interest and cut-off distance for subsequent functions"""   
if __name__=="__main__":
    structure = get_structure('E:\\Leontis\\Python scripts\\2AW7.cif')
    base_seq = 'A'
    chain = 'A'
    aa = 'SER'
    (rotated_aa_x,rotated_aa_y,rotated_aa_z) = find_neighbors(structure, base_seq ,'base',chain, aa, 'aa_sidechain',10)
    (new_base_x, new_base_y, new_base_z)= draw_base(base_seq, RNAconnections)     
     # 3D plots of base-aa interactions
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(rotated_aa_x,rotated_aa_y,rotated_aa_z, c= 'r', marker = 'o')
    ax.scatter(0, 0, 0, c='b', marker='o')
    #ax.scatter(new_base_x,new_base_y,new_base_z, c= 'b', marker = 'o')
    ax.plot(new_base_x, new_base_y, new_base_z, label= 'Base')
    ax.set_xlabel('X Axis')
    ax.set_ylabel('Y Axis')
    ax.set_zlabel('Z Axis')
    plt.title('Adenosine with Ser sidechain')
    plt.show()
